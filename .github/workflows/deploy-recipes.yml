name: Deploy Static Recipe Site

on:
  push:
    branches:
      - main
      - feature/gh-page-builder
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Debug - Show repository structure
        run: |
          echo "=== Repository Structure ==="
          ls -la
          echo ""
          echo "=== Looking for .cook files ==="
          find . -name "*.cook" -type f | head -10
          echo "Total .cook files found: $(find . -name "*.cook" -type f | wc -l)"

      - name: Download CookCLI Binary
        run: |
          echo "=== Downloading CookCLI Binary ==="
          wget -q https://github.com/cooklang/cookcli/releases/latest/download/cook-x86_64-unknown-linux-musl.tar.gz
          tar -xzf cook-x86_64-unknown-linux-musl.tar.gz
          chmod +x cook
          rm cook-x86_64-unknown-linux-musl.tar.gz

          echo "✓ CookCLI installed"
          ./cook --version

      - name: Start Cook Server
        run: |
          echo "=== Starting Cook Server ==="

          ./cook server . --host 0.0.0.0 --port 9080 > server.log 2>&1 &
          SERVER_PID=$!
          echo $SERVER_PID > server.pid
          echo "Server PID: $SERVER_PID"

          echo ""
          echo "=== Waiting for server to be ready (max 60 seconds) ==="

          COUNTER=0
          MAX_ATTEMPTS=60

          while [ $COUNTER -lt $MAX_ATTEMPTS ]; do
            COUNTER=$((COUNTER + 1))

            # Prüfe ob Server noch läuft
            if ! kill -0 $SERVER_PID 2>/dev/null; then
              echo "❌ ERROR: Server process died!"
              echo "=== Server Log Output ==="
              cat server.log
              exit 1
            fi

            # Versuche zu verbinden
            if curl -f -s http://localhost:9080 > /dev/null 2>&1; then
              echo "✓ Server is ready after $COUNTER seconds!"
              echo ""
              echo "=== Server Health Check ==="
              curl -s http://localhost:9080 | head -20
              break
            fi

            echo "Attempt $COUNTER/$MAX_ATTEMPTS - Waiting..."
            sleep 1
          done

          if [ $COUNTER -ge $MAX_ATTEMPTS ]; then
            echo "❌ ERROR: Server did not start after 60 seconds!"
            echo "=== Server Log Output ==="
            cat server.log || echo "(No log file)"
            kill $SERVER_PID 2>/dev/null || true
            exit 1
          fi

      - name: Mirror Website with wget
        run: |
          echo "=== Starting Website Mirror with wget ==="
          mkdir -p dist

          wget --recursive \
               --convert-links \
               --adjust-extension \
               --page-requisites \
               --no-parent \
               --no-host-directories \
               --directory-prefix=./dist \
               --timeout=10 \
               --tries=2 \
               http://localhost:9080/

          WGET_EXIT=$?
          echo ""
          echo "=== wget Exit Code: $WGET_EXIT ==="

          if [ $WGET_EXIT -gt 8 ]; then
            echo "WARNING: wget had issues, but continuing..."
          fi

      - name: Stop Server
        if: always()
        run: |
          if [ -f server.pid ]; then
            PID=$(cat server.pid)
            if kill -0 $PID 2>/dev/null; then
              echo "Stopping server (PID: $PID)"
              kill $PID
              sleep 2
            fi
          fi

          if [ -f server.log ]; then
            echo "=== Last 30 lines of Server Log ==="
            tail -30 server.log
          fi

      - name: Verify downloaded files
        run: |
          echo "=== Checking generated files ==="

          FILE_COUNT=$(find dist -type f | wc -l)
          echo "Total files: $FILE_COUNT"

          if [ $FILE_COUNT -lt 3 ]; then
            echo "❌ ERROR: Almost no files downloaded!"
            echo "Directory listing:"
            ls -la dist/
            exit 1
          fi

          echo ""
          echo "File structure:"
          find dist -type d | sort

          echo ""
          echo "Disk usage:"
          du -sh dist/

          echo ""
          echo "Sample HTML files:"
          find dist -type f -name "*.html" | head -10

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
          force_orphan: true
